#!/usr/bin/env bash
#######################################
# Global variables
#######################################
CONFIG_DIR="/opt/rsh"
DB="${CONFIG_DIR}/tmp/shell.db"
DEBUG="no"

read -r CLIENT SRCPORT SERVER DSTPORT <<<"${SSH_CONNECTION}"
readonly CLIENT SRCPORT SERVER DSTPORT SSH_TTY TERM PPID TMOUT

#######################################
# Notification functions
#######################################

is_debug(){
  local message="$1"
  if [[ "$DEBUG" == "yes" ]]; then
    printf "%s" "$message"
    log "$message"
   fi
}

err(){
  local message="$1"
  logger -s -p local0.notice -t "lab_shell" "$0: $message"
  exit 1
}

log(){
  local message
  message=$(echo "$1" | sed -e 's/\\n/ /g' -e 's/\\t/ /g' -e 's/\\r/ /g')
  logger -p local0.notice -t "lab_shell" "$0: $message"
}

quit(){ local message="$1"; printf "%s" "${message:-Exiting session!}"; log "$message"; exit 1; }

#######################################
# Docker functions
#######################################

verify_availability(){
  [[ -x $(which docker) ]] || quit "Fatal: Docker cannot be found! Ensure Docker is installed"
  docker info >/dev/null 2>&1 || quit "Fatal: There is an issue with the docker configuration!"
}

verify_group(){
  getent group docker 1>/dev/null 2>&1 || quit "Fatal: docker group doesn't exist!"
  getent group docker 2>/dev/null | grep -q "$USER" || quit "Fatal: $USER user not in docker group"
}

does_image_exist(){
  local tag
  local repo="$ENVIRONMENT" # Value in labs/blah.conf
  [[ "$repo" == *:* ]] && tag="${repo##*:}" && repo=${repo%%:*}
  [[ $tag ]] || tag=latest
  if ! docker images | grep -F -w "$repo" | grep -F -w -q "$tag"; then
    docker pull "$ENVIRONMENT" 2>/dev/null || quit "Fatal: Image doesn't exist!"
  fi
}

exit_handler(){
  local result="$1"
  [[ $result -eq 124 ]] && quit "Inactive timer expired in menu, exiting..."
  [[ $result -eq 127 ]] && return 0 # Value 127 is last given command is not found
  [[ $result -eq 130 ]] && return 0 # Value 130 SIGINT (^C) was sent, probably by user
  if [[ $result -ne 0 ]]; then
    quit "Command returned non-zero status"
  fi
}

set_capabilities(){
  local cap="$1"
  local enabled="$2"
  [[ "$enabled" = yes ]] && CAPABILITIES_OPTIONS="${CAPABILITIES_OPTIONS} --cap-add $cap"
  [[ "$enabled" = no ]]  && CAPABILITIES_OPTIONS="${CAPABILITIES_OPTIONS} --cap-drop $cap"
}

check_capabilities(){
  unset CAPABILITIES_OPTIONS
  [[ "$DROP_ALL" = "yes" ]] && CAPABILITIES_OPTIONS="--cap-drop all" && return 0
  [[ "$ADD_ALL"  = "yes" ]] && CAPABILITIES_OPTIONS="--cap-add  all" && return 0

  # Add these to labs/blah.conf to overide defaults below
  ## Enabled by default in Docker (we disable them for improved security)
  AUDIT_WRITE="${CAP_AUDIT_WRITE:-no}"           && set_capabilities AUDIT_WRITE $AUDIT_WRITE
  CHOWN="${CAP_CHOWN:-no}"                       && set_capabilities CHOWN $CHOWN
  DAC_OVERRIDE="${CAP_DAC_OVERRIDE:-no}"         && set_capabilities DAC_OVERRIDE $DAC_OVERRIDE
  FOWNER="${CAP_FOWNER:-no}"                     && set_capabilities FOWNER $FOWNER
  FSETID="${CAP_FSETID:-no}"                     && set_capabilities FSETID $FSETID
  KILL="${CAP_KILL:-no}"                         && set_capabilities KILL $KILL
  MKNOD="${CAP_MKNOD:-no}"                       && set_capabilities MKNOD $MKNOD
  NET_BIND_SERVICE="${CAP_NET_BIND_SERVICE:-no}" && set_capabilities NET_BIND_SERVICE $NET_BIND_SERVICE
  NET_RAW="${CAP_NET_RAW:-no}"                   && set_capabilities NET_RAW $NET_RAW
  SETPCAP="${CAP_SETPCAP:-no}"                   && set_capabilities SECPCAP $SETPCAP
  SYS_CHROOT="${CAP_SYS_CHROOT:-no}"             && set_capabilities SYS_CHROOT $SYS_CHROOT
  # Enabled by default for lab_shell (subset of Docker defaults) for improved security
  SETFCAP="${CAP_SETFCAP:-yes}"                  && set_capabilities SETFCAP $SETFCAP
  SETUID="${CAP_SETUID:-yes}"                    && set_capabilities SETUID $SETUID
  SETGID="${CAP_SETGID:-yes}"                    && set_capabilities SETGID $SETGID

  ## Enabled/Others
  AUDIT_CONTROL="${CAP_AUDIT_CONTROL:-no}"       && set_capabilities AUDIT_CONTROL $AUDIT_CONTROL
  AUDIT_READ="${CAP_AUDIT_READ:-no}"             && set_capabilities AUDIT_READ $AUDIT_READ
  BLOCK_SUSPEND="${CAP_BLOCK_SUSPEND:-no}"       && set_capabilities BLOCK_SUSPEND $BLOCK_SUSPEND
  BPF="${CAP_BPF:-no}"                           && set_capabilities BPF $BPF
  CHKPOINT_RESTORE="${CAP_CHKPOINT_RESTORE:-no}" && set_capabilities BPF $CHKPOINT_RESTORE
  DAC_READ_SEARCH="${CAP_DAC_READ_SEARCH:-no}"   && set_capabilities DAC_READ_SEARCH $DAC_READ_SEARCH
  IPC_LOCK="${CAP_IPC_LOCK:-no}"                 && set_capabilities IPC_LOCK $IPC_LOCK
  IPC_OWNER="${CAP_IPC_OWNER:-no}"               && set_capabilities IPC_OWNER $IPC_OWNER
  LEASE="${CAP_LEASE:-no}"                       && set_capabilities LEASE $LEASE
  LINUX_IMMUTABLE="${CAP_LINUX_IMMUTABLE:-no}"   && set_capabilities LINUX_IMMUTABLE $LINUX_IMMUTABLE
  MAC_ADMIN="${CAP_MAC_ADMIN:-no}"               && set_capabilities MAC_ADMIN $MAC_ADMIN
  MAC_OVERRIDE="${CAP_MAC_OVERRIDE:-no}"         && set_capabilities MAC_OVERRIDE $MAC_OVERRIDE
  NET_ADMIN="${CAP_NET_ADMIN:-no}"               && set_capabilities NET_ADMIN $NET_ADMIN
  NET_BROADCAST="${CAP_NET_BROADCAST:-no}"       && set_capabilities NET_BROADCAST $NET_BROADCAST
  PERFMON="${CAP_PERFMON:-no}"                   && set_capabilities PERFMON $PERFMON
  SYSLOG="${CAP_SYSLOG:-no}"                     && set_capabilities SYSLOG $SYSLOG
  SYS_ADMIN="${CAP_SYS_ADMIN:-no}"               && set_capabilities SYS_ADMIN $SYS_ADMIN
  SYS_BOOT="${CAP_SYS_BOOT:-no}"                 && set_capabilities SYS_BOOT $SYS_BOOT
  SYS_MODULE="${CAP_SYS_MODULE:-no}"             && set_capabilities SYS_MODULE $SYS_MODULE
  SYS_PACCT="${CAP_SYS_PACCT:-no}"               && set_capabilities SYS_PACCT $SYS_PACCT
  SYS_PTRACE="${CAP_SYS_PTRACE:-no}"             && set_capabilities SYS_PTRACE $SYS_PTRACE
  SYS_NICE="${CAP_SYS_NICE:-no}"                 && set_capabilities SYS_NICE $SYS_NICE
  SYS_RAWIO="${CAP_SYS_RAWIO:-no}"               && set_capabilities SYS_RAWIO $SYS_RAWIO
  SYS_RESOURCE="${CAP_SYS_RESOURCE:-no}"         && set_capabilities SYS_RESOURCE $SYS_RESOURCE
  SYS_TIME="${CAP_SYS_TIME:-no}"                 && set_capabilities SYS_TIME $SYS_TIME
  SYS_TTY_CONFIG="${CAP_SYS_TTY_CONFIG:-no}"     && set_capabilities SYS_TTY_CONFIG $SYS_TTY_CONFIG
  WAKE_ALARM="${CAP_SYS_PTRACE:-no}"             && set_capabilities WAKE_ALARM $WAKE_ALARM
}

set_ulimits(){
  local limit="$1"
  local value="$2"
  ULIMIT_OPTIONS="${ULIMIT_OPTIONS} --ulimit ${limit}=${value}"
}

check_ulimits(){
  unset ULIMIT_OPTIONS

  [[ "$ULIMIT_CORE" ]]       && set_ulimits core       $ULIMIT_CORE
  [[ "$ULIMIT_CPU"  ]]       && set_ulimits cpu        $ULIMIT_CPU
  [[ "$ULIMIT_DATA" ]]       && set_ulimits data       $ULIMIT_DATA
  [[ "$ULIMIT_FSIZE" ]]      && set_ulimits fsize      $ULIMIT_FSIZE
  [[ "$ULIMIT_LOCKS" ]]      && set_ulimits locks      $ULIMIT_LOCKS
  [[ "$ULIMIT_MEMLOCK" ]]    && set_ulimits memlock    $ULIMIT_MEMLOCK
  [[ "$ULIMIT_MSGQUEUE" ]]   && set_ulimits msgqueue   $ULIMIT_MSGQUEUE
  [[ "$ULIMIT_NICE" ]]       && set_ulimits nice       $ULIMIT_NICE
  [[ "$ULIMIT_NOFILE" ]]     && set_ulimits nofile     $ULIMIT_NOFILE
  [[ "$ULIMIT_NPROC" ]]      && set_ulimits nproc      $ULIMIT_NPROC
  [[ "$ULIMIT_RSS" ]]        && set_ulimits rss        $ULIMIT_RSS
  [[ "$ULIMIT_RTPRIO" ]]     && set_ulimits rtprio     $ULIMIT_RTPRIO
  [[ "$ULIMIT_RTTIME" ]]     && set_ulimits rttime     $ULIMIT_RTTIME
  [[ "$ULIMIT_SIGPENDING" ]] && set_ulimits sigpending $ULIMIT_SIGPENDING
  [[ "$ULIMIT_STACK" ]]      && set_ulimits stack      $ULIMIT_STACK
}

env_setup(){
  for i in $ENVS; do
   ENV_CMD="${ENV_CMD} --env $i"
  done
}

start(){
  does_image_exist
  check_capabilities
  check_ulimits
  env_setup

  # Note: Publishing ports not supported with this version
  [[ "$ENVIRONMENT" == "systemd" ]] && local atch_opt="--detach" || local atch_opt="--interactive --tty"
  [[ "$REMOVE" == "True" ]] && local rm_opt="--rm" || local rm_opt=""
  local name_opt="--name="${LAB}.${USER}""
  [[ "$HOSTNAME" ]] && local hname_opt="--hostname $HOSTNAME"
  local res_opt="--cpu-shares ${CPUSHARES:-1024} --memory ${MEMORY:-0} --memory-swap ${SWAP:--1}"
  local net_opt="--net $NETWORK"
  [[ "$DNS" ]] && local dns_opt="--dns $DNS"
  local glb_opt="$GLOBAL_OPTIONS"
  local oth_opt="$LOCAL_OPTIONS"
  local cap_opt="$CAPABILITIES_OPTIONS"
  local lmt_opt="$ULIMIT_OPTIONS"
  local mnt_opt="$MOUNT"
  local tmpfs_opt="$TMPFS"
  local dir_opt="--workdir ${WORKDIR:-/home/$VIRTUSER}"
  local env_opt="--user ${VIRTUSER:-root} $ENV_CMD"
  local img_opt="$ENVIRONMENT"
  [[ "$ENVIRONMENT" != "systemd" ]] && local tim_opt="timeout -s KILL $TIMEOUT" || local tim_opt=""
  [[ "$ENVIRONMENT" == "systemd" ]] && local cmd_opt="" || local cmd_opt="${COMMAND:-bash}"

  # If debugging is yes
  is_debug "shell: CLIENT=$CLIENT SRCPORT=$SRCPORT SERVER=$SERVER DSTPORT=$DSTPORT SSH_TTY=$SSH_TTY TERM=$TERM PPID=$PPID TMOUT=$TMOUT"
  is_debug "opt:  docker run $atch_opt $rm_opt $name_opt $hname_opt $res_opt $net_opt $dns_opt $glb_opt $oth_opt $mnt_opt $cap_opt $lmt_opt $dir_opt $env_opt $img_opt $tim_opt $cmd_opt"

  # printf "%s" "$MOTD"

  log "${USER}@${CLIENT}: Started $LAB"
  [[ "$REMOVE" != "True" ]] && sqlite3 "$DB" "pragma foreign_keys = on; INSERT INTO environments(user, environment) values ('$USER', '$LAB');" 2>/dev/null
  if [[ "$ENVIRONMENT" == "systemd" ]]; then
    eval docker run "$atch_opt $rm_opt $name_opt $hname_opt $res_opt $net_opt $dns_opt $tmpfs_opt $mnt_opt $cap_opt $lmt_opt $img_opt" >/dev/null 2>&1
    exec
    if [[ "$REMOVE" == "True" ]]; then
      sqlite3 "$DB" "pragma foreign_keys = on; DELETE FROM environments WHERE user='$USER' AND environment='$LAB';"
      stop
      remove
    fi
  else
    eval docker run "$atch_opt $rm_opt $name_opt $hname_opt $res_opt $net_opt $dns_opt $glb_opt $oth_opt $cap_opt $lmt_opt $mnt_opt $dir_opt $env_opt $img_opt $tim_opt $cmd_opt"
  fi
  exit_handler $?
  log "${USER}@${CLIENT}: Exited $LAB"
}

attach(){
  log "${USER}@${CLIENT}: Resumed $LAB"
  docker start -i "${LAB}.${USER}"
  exit_handler $? || return 1
  log "${USER}@${CLIENT}: Exited $LAB"
  return 0
}

exec(){
  log "${USER}@${CLIENT}: exec $LAB"
  sleep 1
  eval docker exec -it "${LAB}.${USER} rm /run/nologin >/dev/null 2>&1"
  eval docker exec -it "$dir_opt $env_opt ${LAB}.${USER} $tim_opt ${COMMAND}"
  exit_handler $? || return 1
  log "${USER}@${CLIENT}: Exited $LAB"
  return 0
}

stop(){
  log "${USER}@${CLIENT}: Stopped $LAB"
  docker kill "${LAB}.${USER}" >/dev/null 2>&1
  return 0
}

remove(){
  log "${USER}@${CLIENT}: Removed $LAB"
  docker rm "${LAB}.${USER}" >/dev/null 2>&1
  return 0
}

#######################################
# SQLite database functions
#######################################

create_db(){
sqlite3 "$DB" <<EOF
PRAGMA foreign_keys = ON;
CREATE TABLE accounts (
        user VARCHAR PRIMARY KEY,
        ts TIMESTAMP
);
CREATE TABLE environments (
        user VARCHAR REFERENCES accounts(user) ON DELETE CASCADE,
        environment VARCHAR
);
CREATE UNIQUE INDEX idx_environments_user_environment ON environments(user, environment);
EOF
log "${USER}@${CLIENT}: Database created"
return 0
}

is_sqlite(){
  local file
  file="$(which sqlite3)"
  [[ -f "$file" ]] || quit "Fatal: sqlite3 not found, is it installed and in the PATH?"
  if ! file "$DB" 2>/dev/null | grep -q SQLite; then
    rm -f "$DB" 2>/dev/null
    create_db
    test $? -eq 0 && return 0 || quit "Unable to create $DB"
  fi
}

identify(){
  auth=$(sqlite3 $DB "SELECT user FROM accounts WHERE user='$USER';")
  if [[ ! "$auth" ]]; then
  	sqlite3 "$DB" "pragma foreign_keys = on; INSERT INTO accounts VALUES('$USER', strftime('%s', 'now'));" 2>/dev/null || quit "Couldn't write to $DB!"
  	log "${USER}@${CLIENT}: Account created"
  fi
}

#######################################
# Core function
#######################################

connect(){
  # check if LAB value is in range
  #if [[ $LAB =~ ^lab(0\.0)|(1\.[1-8])|(2\.[1-7])|(3\.[1-9])|(4\.[1-7])|(5\.[1-6]) ]]; then
  if [[ -f "/opt/rsh/conf/$LAB.conf" ]]; then

    ORIG_TOKEN="$(head -1 /home/student/logs/studentinfo | cut -d: -f2)"
    if [[ ( "$ORIG_TOKEN" == "$PLAYER_TOKEN" ) || ( "$LAB" == "lab0.0" ) ]]; then
      CONFIGURATION="conf/${LAB}.conf"

      if [[ $ACT == "START" ]]; then
        if [[ -f "$CONFIG_DIR/$CONFIGURATION" ]]; then
            . "$CONFIG_DIR/$CONFIGURATION"
          else
            printf "Something went wrong! Ask your instructor for assistance.\n"
            exit
        fi

        existing=$(sqlite3 $DB "SELECT environment FROM environments WHERE user='$USER' AND environment='$LAB'";)
        if [[ $existing ]]; then
          attach
        else
          start
        fi

      elif [[ $ACT == "DELETE" ]]; then
        sqlite3 "$DB" "pragma foreign_keys = on; DELETE FROM environments WHERE user='$USER' AND environment='$LAB';"
        stop
        remove
      else
        log "${USER}@${CLIENT}: Tried to pass invalid action $ACT"
        exit
      fi
    else 
      printf "Student identification failure. Ask your instructor for assistance.\n"
      exit
    fi 
  else
    printf "Requested lab is not available. Ask your instructor for assistance.\n"
    exit
  fi
}

#######################################
# Execution
#######################################

trap 'echo; quit "Trap received, exiting..."' 1 2 3 20
verify_availability
verify_group
is_sqlite
identify
connect
exit